#!/usr/bin/env python
import rospy

from random import randint

class HeartbeatClientPy:
	def __init__(self, name):
		self.state = 0
		self.node_name = name
		rospy.wait_for_service('/heartbeat/register_node')
		try:
			self.register_node = rospy.ServiceProxy('/heartbeat/register_node', RegisterNode)
			print "Service register_node call"
		except rospy.ServiceException, e:
			print "Service call failed: %s,"%e	
		rospy.wait_for_service('/heartbeat/unregister_node')
		try:
			self.unregister_node = rospy.ServiceProxy('/heartbeat/unregister_node', UnregisterNode)
			print "Service unregister_node call"
		except rospy.ServiceException, e:
			print "Service call failed: %s,"%e	
		rospy.wait_for_service('/heartbeat/register_node')
		try:
			self.set_state = rospy.ServiceProxy('/heartbeat/set_state', SetState)
			print "Service set_state call"
		except rospy.ServiceException, e:
			print "Service call failed: %s,"%e	

	def start(self):
		if (self.register_node(self.node_name, 1)):
			print "Node heartbeat sucessfully registered"
		else:
			print "Node heartbeat failed to register"
	def stop(self):	
		if (not(self.unregister_node(self.node_name))):
			print "Heartbeat unregister RPC failed"		
		else:
			print "Node unregistered from Heartbeat"

	def set_node_state(self, st):
		st_from = State()
		st_to = State()
		st_from.value =  self.state
		st_to.value =  st
		resp = self.set_state(st_from,st_to,self.node_name)
		state = resp.current.value

#def main():
#    rospy.init_node('prova')
#    r = rospy.Rate(10)
#    hb = HeartbeatClientPy()
#    hb.start()
#    hb.set_node_state(1)
#    rospy.spin()  	
#    hb.stop()

#if __name__ == '__main__':
#	try:
#		main()
#	except rospy.ROSInterruptException: pass
    

