#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sstream>
#include <cstring>
#include <sys/socket.h>
#include <netdb.h>
#include <idrive_data_logger/Bio_sensor.h>


const char SERVER_STATUS[16] = "server_status\r\n";
const char DEVICE_LIST[14] = "device_list\r\n";
const char DEVICE_CONNECT[15] = "device_connect";
bool first = true;

bool HandleError(ssize_t control){
    if (control == 0) {
        ROS_INFO("host shut down.");
        return false;
    }else if (control == -1) {
        ROS_INFO("recieve error!");
        return false;
    }else {
        if (first) {
            ROS_INFO("Recieving data");
            first = false;
        }
    }


    return true;
}

char[] read(){
    char string[200];
    int i = 0;
    while (*rc!='\n'){
	   bytes_recieved = recv(socketfd, rc, 1, 0);
	   if (HandleError(bytes_recieved)){
	       string
               ROS_INFO("char %c", *rc);
           }
    }
}


    return true;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "empatica_socket_client");
    ros::NodeHandle n;
    ros::Publisher publisher = n.advertise<idrive_data_logger::Bio_sensor>("empatica_sensor", 1000);
    idrive_data_logger::Bio_sensor msg;
    ros::Rate loop_rate(100);

//----------------------------SOCKET CONFIG--------------------------------------------------------------

    int status;
    struct addrinfo host_info;       // The struct that getaddrinfo() fills up with data.
    struct addrinfo *host_info_list; // Pointer to the to the linked list of host_info's.
    memset(&host_info, 0, sizeof host_info);

    ROS_INFO("Setting up the structs...");
    host_info.ai_family = AF_UNSPEC;     // IP version not specified. Can be both.
    host_info.ai_socktype = SOCK_STREAM; // Use SOCK_STREAM for TCP
    status = getaddrinfo("192.168.1.10", "28015", &host_info, &host_info_list);
    // getaddrinfo returns 0 on succes, or some other value when an error occured.
    // (translated into human readable text by the gai_gai_strerror function).
    if (status != 0){
        ROS_INFO("getaddrinfo error %s" , gai_strerror(status)) ;
    }

    ROS_INFO("Creating a socket...");
    int socketfd ; // The socket descripter
    socketfd = socket(host_info_list->ai_family, host_info_list->ai_socktype,
                      host_info_list->ai_protocol);
    if (socketfd == -1)  ROS_INFO("socket error");

    ROS_INFO("Connecting...");
    status = -1;
    while(status == -1){
        status = connect(socketfd, host_info_list->ai_addr, host_info_list->ai_addrlen);
        if (status == -1)  ROS_INFO("connect error. Wait the server");
    }

    ssize_t bytes_recieved;
    char recv_buf[10];
    char* rc = (char*) recv_buf;
    char message[20] = "server_status\r\n";
    
    if( send(socketfd , SERVER_STATUS , strlen(SERVER_STATUS) , 0) < 0){
    	ROS_INFO("Send failed");
    }else{
	 ROS_INFO("Send ok");
	while (*rc!='\n'){
	   bytes_recieved = recv(socketfd, rc, 1, 0);
	   if (HandleError(bytes_recieved)){
               ROS_INFO("char %c", *rc);
           }
	}
    }
    ROS_INFO("Waiting to recieve data...");

 //------------------------------------------------------------------------------------------------------------

    while (ros::ok())
    {

    /*    bytes_recieved = recv(socketfd, sec, 4, 0);
        // If no data arrives, the program will just wait here until some data arrives.
        if (HandleError(bytes_recieved)){
            //ROS_INFO("sec %i", *sec);
        }
        sec_temp = *sec;
        bytes_recieved = recv(socketfd, nsec, 4, 0);
        // If no data arrives, the program will just wait here until some data arrives.
        if (HandleError(bytes_recieved)){
            //ROS_INFO("nsec %i", *nsec);
        }

        msg.header.stamp = ros::Time(sec_temp,*nsec);
        bytes_recieved = recv(socketfd, sensor_id, 4, 0);
        // If no data arrives, the program will just wait here until some data arrives.
        if (HandleError(bytes_recieved)){
            //ROS_INFO("sensor id %i", *sensor_id);
            switch (*sensor_id){
              case 17:
                 msg.sensor_type = "temperature";
                 msg.MU = "degree Celsius";
                 break;
              case 5:
                 msg.sensor_type = "skin conductance";
                 msg.MU = "microSiemens";
                 break;
              case 10:
                 msg.sensor_type = "respiration";
                 msg.MU = "relative";
                 break;
              case 4:
                 msg.sensor_type = "BVP";
                 msg.MU = "relative";
                 break;
              case 6:
                 msg.sensor_type = "ECG";
                 msg.MU = "milliVolt";
                 break;
              case 9:
                msg.sensor_type = "SEMG";
                msg.MU = "milliVolts, converted according to an RMStype function";
                break;
              case 15:
                msg.sensor_type = "SEMG";
                msg.MU = "milliVolts, converted according to an RMStype function";
                break;

            }
        }

        bytes_recieved = recv(socketfd, freq, 4, 0);
        // If no data arrives, the program will just wait here until some data arrives.
        if (HandleError(bytes_recieved)){
            msg.freq = *freq;
            //ROS_INFO("freq %f", *freq);
        }

        bytes_recieved = recv(socketfd, lenght, 4, 0);
        // If no data arrives, the program will just wait here until some data arrives.
        if (HandleError(bytes_recieved)){
            msg.sample_number = *lenght;
            //ROS_INFO("lenght %i", *lenght);
        }

        int count = *lenght;
        msg.data.clear();
        for(int i = 0;i < count; i++){
            bytes_recieved = recv(socketfd, data, 4, 0);
            // If no data arrives, the program will just wait here until some data arrives.
            if (HandleError(bytes_recieved)){
                msg.data.push_back(*data);
                //ROS_INFO("data %f", *data);
            }
        }

        msg.header.frame_id = "/bio_sensor";
        publisher.publish(msg); */
        ros::spinOnce();
        loop_rate.sleep();
    }
    close(socketfd);

    return 0;
}

